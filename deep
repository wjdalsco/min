<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>딥페이크 탐지 시뮬레이터</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Noto+Sans+KR:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Noto Sans KR', 'Inter', sans-serif;
        }
        .gradient-bg {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        }
        .card {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        #upload-label {
            transition: all 0.3s ease;
        }
        #upload-label:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        #analyze-btn:disabled {
            cursor: not-allowed;
            opacity: 0.6;
        }
        .log-item {
            display: flex;
            align-items: center;
            opacity: 0;
            transform: translateY(10px);
            animation: fadeIn 0.5s forwards;
        }
        .log-item .spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #4f46e5;
            border-top-color: transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        .log-item.completed .spinner {
            animation: none;
            border-color: #16a34a;
            background-color: #16a34a;
            clip-path: polygon(14% 44%, 0 65%, 24% 88%, 38% 73%, 74% 34%, 60% 20%);
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        @keyframes fadeIn {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body class="gradient-bg min-h-screen flex items-center justify-center p-4">

    <main class="w-full max-w-2xl mx-auto">
        <div class="card rounded-2xl shadow-xl p-6 md:p-10">
            <div class="text-center mb-8">
                <h1 class="text-3xl md:text-4xl font-bold text-gray-800">딥페이크 탐지 시뮬레이터</h1>
                <p class="text-gray-600 mt-2">AI가 이미지를 분석하여 딥페이크 가능성을 탐지합니다.</p>
                <p class="text-xs text-gray-500 mt-1">(주의: 본 기능은 실제 탐지가 아닌 시뮬레이션입니다.)</p>
            </div>

            <!-- Upload Area -->
            <div id="upload-area" class="text-center">
                <input type="file" id="image-upload" class="hidden" accept="image/*" onchange="displayImage(event)">
                <label id="upload-label" for="image-upload" class="cursor-pointer inline-block bg-indigo-600 text-white font-bold py-3 px-8 rounded-lg shadow-md hover:bg-indigo-700">
                    이미지 업로드
                </label>
            </div>

            <!-- Image Preview and Analysis -->
            <div id="analysis-container" class="mt-8 hidden">
                <div id="image-preview" class="mb-6 border-2 border-dashed border-gray-300 rounded-lg p-4 bg-gray-50 flex justify-center items-center min-h-[200px]">
                    <img id="uploaded-image" src="#" alt="업로드된 이미지" class="max-w-full max-h-80 rounded-md shadow-sm">
                </div>
                <div class="text-center">
                    <button id="analyze-btn" class="w-full md:w-auto bg-green-600 text-white font-bold py-3 px-10 rounded-lg shadow-md hover:bg-green-700 transition-all duration-300 ease-in-out">
                        분석 시작
                    </button>
                </div>
            </div>

            <!-- Results Section -->
            <div id="results-section" class="mt-8 hidden">
                <h2 class="text-xl font-semibold text-gray-700 mb-4 border-b pb-2">분석 과정</h2>
                <div id="analysis-log" class="space-y-2 text-gray-600 text-sm"></div>
                
                <div id="final-result-container" class="mt-6 p-5 rounded-lg text-center hidden">
                    <h3 id="result-title" class="text-2xl font-bold"></h3>
                    <p id="result-score" class="text-lg mt-1"></p>
                    <p id="result-description" class="text-sm mt-2 max-w-md mx-auto"></p>
                </div>
            </div>
        </div>
    </main>

    <script>
        // --- DOM Elements ---
        const uploadArea = document.getElementById('upload-area');
        const analysisContainer = document.getElementById('analysis-container');
        const uploadedImage = document.getElementById('uploaded-image');
        const analyzeBtn = document.getElementById('analyze-btn');
        const resultsSection = document.getElementById('results-section');
        const analysisLog = document.getElementById('analysis-log');
        const finalResultContainer = document.getElementById('final-result-container');
        const resultTitle = document.getElementById('result-title');
        const resultScore = document.getElementById('result-score');
        const resultDescription = document.getElementById('result-description');

        // --- Functions ---
        
        /**
         * Displays the uploaded image for preview.
         * @param {Event} event - The file input change event.
         */
        function displayImage(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    uploadedImage.src = e.target.result;
                    uploadArea.classList.add('hidden');
                    analysisContainer.classList.remove('hidden');
                    resultsSection.classList.add('hidden');
                    analysisLog.innerHTML = '';
                    finalResultContainer.classList.add('hidden');
                    analyzeBtn.disabled = false;
                }
                reader.readAsDataURL(file);
            }
        }

        /**
         * Simulates the deepfake analysis process.
         */
        async function simulateAnalysis() {
            analyzeBtn.disabled = true;
            analyzeBtn.innerText = '분석 중...';
            resultsSection.classList.remove('hidden');
            analysisLog.innerHTML = '';
            finalResultContainer.classList.add('hidden');
            
            const steps = [
                "이미지 무결성 검사 중...",
                "얼굴 랜드마크 추출 중...",
                "미세 표정 비대칭성 분석...",
                "픽셀 레벨 아티팩트 스캔 중...",
                "조명 및 그림자 일관성 확인...",
                "GAN 잔여 패턴 탐색 중...",
                "최종 신뢰도 평가..."
            ];

            for (let i = 0; i < steps.length; i++) {
                await new Promise(resolve => setTimeout(resolve, 800));
                const logItem = document.createElement('div');
                logItem.className = 'log-item';
                
                const spinner = document.createElement('div');
                spinner.className = 'spinner mr-3';
                logItem.appendChild(spinner);
                
                const text = document.createTextNode(steps[i]);
                logItem.appendChild(text);
                
                analysisLog.appendChild(logItem);
                
                if (i < steps.length -1) {
                    setTimeout(() => spinner.classList.add('completed'), 400);
                }
            }
            
            // Wait for the last step to complete visually
            await new Promise(resolve => setTimeout(resolve, 800));
            const lastLogItem = analysisLog.querySelector('.log-item:last-child .spinner');
            if (lastLogItem) {
                lastLogItem.classList.add('completed');
            }

            displayFinalResult();
            analyzeBtn.innerText = '분석 시작';
        }
        
        /**
         * Displays the final simulated result.
         */
        function displayFinalResult() {
            const isDeepfake = Math.random() < 0.35; // 35% chance of being a deepfake
            let title, score, description, colorClass;

            if (isDeepfake) {
                title = "딥페이크 가능성 탐지";
                score = `신뢰도: ${(Math.random() * (98 - 75) + 75).toFixed(2)}%`;
                description = "분석 결과, 이미지에서 AI 생성의 특징으로 의심되는 미세한 비일관성이 발견되었습니다. 주의가 필요합니다.";
                colorClass = "bg-red-100 text-red-800";
            } else {
                title = "진짜 이미지로 추정";
                score = `신뢰도: ${(Math.random() * (99 - 85) + 85).toFixed(2)}%`;
                description = "분석 결과, 이미지에서 인위적인 조작의 흔적이 발견되지 않았습니다. 진짜 이미지일 확률이 높습니다.";
                colorClass = "bg-green-100 text-green-800";
            }

            resultTitle.innerText = title;
            resultScore.innerText = score;
            resultDescription.innerText = description;
            
            // [FIX] Set className directly to avoid InvalidCharacterError with classList.add
            // The className property replaces all existing classes, correctly handling the 'hidden' state as well.
            finalResultContainer.className = 'mt-6 p-5 rounded-lg text-center ' + colorClass;
        }

        // --- Event Listeners ---
        analyzeBtn.addEventListener('click', simulateAnalysis);

    </script>
</body>
</html>
